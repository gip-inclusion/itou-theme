@mixin custom-button-variant($base, $active, $disable, $text) {
  color: $text;
  background-color: $base;
  border-color: $base !important;
  @include box-shadow($btn-box-shadow);

  @include hover() {
    color: $text;
    border-color: $active !important;
    border-color: $active !important;
  }

  &:focus,
  &.focus {
    color: color-yiq($text);
    @include gradient-bg($active);
    border-color: $active;
    @if $enable-shadows {
      @include box-shadow(
        $btn-box-shadow,
        0 0 0 $btn-focus-width rgba(mix(color-yiq($base), $base, 15%), 0.5)
      );
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: 0
        0
        0
        $btn-focus-width
        rgba(mix(color-yiq($base), $base, 15%), 0.5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq($text);
    background-color: $disable;
    border-color: $disable;
    // Remove CSS gradients if they're enabled
    @if $enable-gradients {
      background-image: none;
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($text);
    background-color: $active;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active;
  }
}

@each $color, $value in $theme-colors {
  .btn-#{$color} {
    @if $color == 'primary' {
      color: $white !important;
      background-color: $button !important;
      border-color: $button !important;

      &.hover,
      &:hover,
      &.active,
      &:active,
      &.focus,
      &:focus {
        color: $white !important;
        background-color: $button-light !important;
        border-color: $button-light !important;
      }

      &.disabled,
      &:disabled {
        color: $white !important;
        background-color: $nuance-06 !important;
        border-color: $nuance-06 !important;
      }
    }

    @if $color == 'secondary' {
      color: $button !important;
      background-color: $button-lightest !important;
      border-color: $button-lightest !important;

      &.hover,
      &:hover,
      &.active,
      &:active,
      &.focus,
      &:focus {
        color: $button-light !important;
        background-color: $button-lighter !important;
        border-color: $button-lighter !important;
      }

      &.disabled,
      &:disabled {
        color: $nuance-06 !important;
        background-color: $gray-400 !important;
        border-color: $gray-400 !important;
      }
    }

    @if $color == 'success' {
      color: $success !important;
      background-color: $success-lighter !important;
      border-color: $success-lighter !important;

      &.hover,
      &:hover,
      &.active,
      &:active,
      &.focus,
      &:focus {
        color: $success !important;
        background-color: $success-light !important;
        border-color: $success-light !important;
      }

      &.disabled,
      &:disabled {
        color: $success-light !important;
        background-color: $success-lightest !important;
        border-color: $success-lightest !important;
      }
    }

    @if $color == 'warning' {
      color: $warning !important;
      background-color: $warning-lighter !important;
      border-color: $warning-lighter !important;

      &.hover,
      &:hover,
      &.active,
      &:active,
      &.focus,
      &:focus {
        color: $warning !important;
        background-color: $warning-light !important;
        border-color: $warning-light !important;
      }

      &.disabled,
      &:disabled {
        color: $warning-light !important;
        background-color: $warning-lightest !important;
        border-color: $warning-lightest !important;
      }
    }

    @if $color == 'danger' {
      color: $danger !important;
      background-color: $danger-lighter !important;
      border-color: $danger-lighter !important;

      &.hover,
      &:hover,
      &.active,
      &:active,
      &.focus,
      &:focus {
        color: $danger !important;
        background-color: $danger-light !important;
        border-color: $danger-light !important;
      }

      &.disabled,
      &:disabled {
        color: $danger-light !important;
        background-color: $danger-lightest !important;
        border-color: $danger-lightest !important;
      }
    }

    @if $color == 'info' {
      color: $info !important;
      background-color: $info-lighter !important;
      border-color: $info-lighter !important;

      &.hover,
      &:hover,
      &.active,
      &:active,
      &.focus,
      &:focus {
        color: $info !important;
        background-color: $info-light !important;
        border-color: $info-light !important;
      }

      &.disabled,
      &:disabled {
        color: $nuance-06 !important;
        background-color: $gray-400 !important;
        border-color: $gray-400 !important;
      }
    }

    @if $color == 'important' {
      color: $important !important;
      background-color: $important-lighter !important;
      border-color: $important-lighter !important;

      &.hover,
      &:hover,
      &.active,
      &:active,
      &.focus,
      &:focus {
        color: $important !important;
        background-color: $important-light !important;
        border-color: $important-light !important;
      }

      &.disabled,
      &:disabled {
        color: $nuance-06 !important;
        background-color: $gray-400 !important;
        border-color: $gray-400 !important;
      }
    }
  }

  .btn-outline-#{$color} {
    @if $color == 'primary' {
      color: $button !important;
      background-color: transparent !important;
      border-color: $button !important;

      &.hover,
      &:hover,
      &.active,
      &:active,
      &.focus,
      &:focus {
        color: $button !important;
        background-color: $nuance-09 !important;
        border-color: $button !important;
      }

      &.disabled,
      &:disabled {
        color: $nuance-06 !important;
        background-color: $white !important;
        border-color: $nuance-06 !important;
      }
    }

    @if $color == 'white' {
      color: $white !important;
      background-color: transparent !important;
      border-color: $white !important;

      &.hover,
      &:hover,
      &.active,
      &:active,
      &.focus,
      &:focus {
        color: $white !important;
        background-color: rgba($white, 0.2) !important;
        border-color: $white !important;
      }

      &.disabled,
      &:disabled {
        color: $disabled-color !important;
        background-color: transparent !important;
        border-color: $disabled-color !important;
      }
    }
  }
}

@each $breakpoint, $container-max-width in $container-max-widths {
  .container-max-#{$breakpoint} {
    max-width: $container-max-width !important;
  }
}

@each $breakpoint, $grid-breakpoint in $grid-breakpoints {
  $map-widths: (
    25: 25%,
    33: 33%,
    50: 50%,
    66: 66%,
    75: 75%,
  );

  @each $width, $map-width in $map-widths {
    .form-group-input-w-#{$breakpoint}-#{$width} {
      @include media-breakpoint-up(#{$breakpoint}) {
        .form-control:not(.duet-date__input),
        .form-select,
        .input-group,
        .duet-date,
        .select2-container {
          width: #{$map-width} !important;
        }
      }
    }
  }
}
